@using cwagnerPortfolio.Models
@model LoginViewModel
@{
    ViewBag.Title = "Log in";
}

<div id="blogpost" class="inner-content">

    <section id="page-title" class="inner-section"
             data-animation-origin="right"
             data-animation-duration="500"
             data-animation-delay="300"
             data-animation-distance="25px">
        <div class="container-fluid nopadding">
        </div>
        <div class="row">
            <div class="col-md-8">
                <section id="loginForm class=" inner-section feedback feedback-light"">
                    <div class="col-md-8 e-centered"
                         data-animation-origin="top"
                         data-animation-duration="500"
                         data-animation-delay="600"
                         data-animation-distance="25px">
                        <h3 class="font-accident-two-normal uppercase text-center">@ViewBag.Title</h3>
                        <div id="form-messages"></div>
                        @using (Html.BeginForm("Login", "Account", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
                        {
                            @Html.AntiForgeryToken()
                            <div class="wpcf7-form">
                                <h4 class="font-accident-two-normal uppercase text-center">Use a local account to log in.</h4>
                                <hr />
                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                <div class="field">
                                    @Html.LabelFor(m => m.Email, new { @class = "col-md-offset-0 control-label" })
                                    <input type="email" id="Email" name="Email" placeholder="Email" required>
                                    @Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-danger" })
                                </div>
                                <div class="field">
                                    @Html.LabelFor(m => m.Password, new { @class = "col-md-offset-0 control-label" })
                                    <input type="password" id="Password" name="Password" placeholder="Password" required>
                                    @Html.ValidationMessageFor(m => m.Password, "", new { @class = "text-danger" })
                                </div>
                                <div class="field">
                                    @Html.LabelFor(m => m.RememberMe, new { @class = "col-md-offset-0 control-label" })
                                    <div class="pretty o-danger curvy a-rotate">
                                        <input id="RememberMe" name="RememberMe" type="checkbox" value="true" @(Model?.RememberMe == true ? "checked=\"checked\"" : "") />
                                        <label><i class="fa fa-check"></i></label>
                                    </div>
                                </div>
                                <div class="field text-center">
                                    <button type="submit" class="btn btn-lg btn-darker">Log in</button>
                                </div>
                            </div>
                            <p>
                                @Html.ActionLink("Register as a new user", "Register")
                            </p>
                            //Enable this once you have account confirmation enabled for password reset functionality
                            <p>
                                @Html.ActionLink("Forgot your password?", "ForgotPassword")
                            </p>
                        }
                    </div>
                </section>
            </div>
            <div class="col-md-4">
                <section id="socialLoginForm">
                    @Html.Partial("_ExternalLoginsListPartial", new ExternalLoginListViewModel { ReturnUrl = ViewBag.ReturnUrl })
                </section>
            </div>
        </div>
    </section>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
